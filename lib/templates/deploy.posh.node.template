
# Node Helpers
# ------------

$NODE_EXE = "node"
$NPM_CMD = "npm"

function selectNodeVersion() {
  if ($env:KUDU_SELECT_NODE_VERSION_CMD -ne $null) {
    # The following are done only on Windows Azure Websites environment
    $SELECT_NODE_VERSION = "$env:KUDU_SELECT_NODE_VERSION_CMD `"$DEPLOYMENT_SOURCE{SitePath}`" `"$DEPLOYMENT_TARGET`" `"$DEPLOYMENT_TEMP`""
    try {
      iex $SELECT_NODE_VERSION
    } catch {
      exitWithMessageOnError "select node version failed"
    }

    if (Test-Path "$DEPLOYMENT_TEMP\__nodeVersion.tmp") {
      $NODE_EXE = cat "$DEPLOYMENT_TEMP\__nodeVersion.tmp"
      exitWithMessageOnError "getting node version failed"
    }

    if (Test-Path "$DEPLOYMENT_TEMP\__npmVersion.tmp") {
      $NPM_JS_PATH = cat "$DEPLOYMENT_TEMP\__npmVersion.tmp"
      exitWithMessageOnError "getting npm version failed"
    }

    if ($NODE_EXE -eq $null) {
      $NODE_EXE = "node"
    }
    $NPM_CMD = "`"$NODE_EXE`" `"$NPM_JS_PATH`""
  }
}

##################################################################################################################################
# Deployment
# ----------

echo "Handling node.js deployment."

# 1. KuduSync
if ($env:IN_PLACE_DEPLOYMENT -ne "1") {
  & $KUDU_SYNC_CMD -v 50 -f "$DEPLOYMENT_SOURCE{SitePath}" -t "$DEPLOYMENT_TARGET" -n "$NEXT_MANIFEST_PATH" -p "$PREVIOUS_MANIFEST_PATH" -i ".git;.hg;.deployment;deploy.ps1"
  exitWithMessageOnError "Kudu Sync failed"
}

# 2. Select node version
selectNodeVersion

# 3. Install npm packages
if (Test-Path "$DEPLOYMENT_TARGET\package.json") {
  pushd "$DEPLOYMENT_TARGET"
  try {
    iex "$NPM_CMD prune --production"
    iex "$NPM_CMD install --production"
  } catch {
    exitWithMessageOnError "npm failed"
  }
  popd
}

##################################################################################################################################
